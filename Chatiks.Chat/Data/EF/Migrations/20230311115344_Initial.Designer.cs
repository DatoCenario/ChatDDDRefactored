// <auto-generated />
using System;
using Chatiks.Chat.Data.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Chatiks.Chat.Data.EF.Migrations
{
    [DbContext(typeof(ChatContext))]
    [Migration("20230311115344_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.1.23111.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Chatiks.Chat.Data.EF.Domain.Chat.Chat", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("ExternalAvatarid")
                        .HasColumnType("bigint");

                    b.Property<long?>("ExternalOwnerId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("Chatiks.Chat.Data.EF.Domain.Chat.ChatMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("EditTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("ExternalOwnerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("SendTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("Chatiks.Chat.Data.EF.Domain.Chat.ChatMessageImageLink", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ChatMessageId")
                        .HasColumnType("bigint");

                    b.Property<long>("ExternalImageId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ChatMessageId");

                    b.HasIndex("Id");

                    b.ToTable("ImageLinks");
                });

            modelBuilder.Entity("Chatiks.Chat.Data.EF.Domain.Chat.ChatRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ChatRoles");
                });

            modelBuilder.Entity("Chatiks.Chat.Data.EF.Domain.Chat.ChatUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ExternalInviterId")
                        .HasColumnType("bigint");

                    b.Property<long>("ExternalUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("Id");

                    b.ToTable("ChatUsers");
                });

            modelBuilder.Entity("Chatiks.Chat.Data.EF.Domain.Chat.ChatMessage", b =>
                {
                    b.HasOne("Chatiks.Chat.Data.EF.Domain.Chat.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("Chatiks.Chat.Data.EF.Domain.Chat.ChatMessageImageLink", b =>
                {
                    b.HasOne("Chatiks.Chat.Data.EF.Domain.Chat.ChatMessage", "ChatMessage")
                        .WithMany("MessageImageLinks")
                        .HasForeignKey("ChatMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatMessage");
                });

            modelBuilder.Entity("Chatiks.Chat.Data.EF.Domain.Chat.ChatUser", b =>
                {
                    b.HasOne("Chatiks.Chat.Data.EF.Domain.Chat.Chat", "Chat")
                        .WithMany("ChatUsers")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("Chatiks.Chat.Data.EF.Domain.Chat.Chat", b =>
                {
                    b.Navigation("ChatUsers");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Chatiks.Chat.Data.EF.Domain.Chat.ChatMessage", b =>
                {
                    b.Navigation("MessageImageLinks");
                });
#pragma warning restore 612, 618
        }
    }
}
